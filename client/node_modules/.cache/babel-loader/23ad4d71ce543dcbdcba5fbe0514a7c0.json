{"ast":null,"code":"import _classCallCheck from \"/home/tech/Downloads/newCode/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tech/Downloads/newCode/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tech/Downloads/newCode/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tech/Downloads/newCode/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tech/Downloads/newCode/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/tech/Downloads/newCode/src/components/payments/Payments.js\";\nimport React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { scriptLoader, paypal } from 'react-async-script-loader';\nimport { paymentAuthorized, paymentCancelled } from '../../actions';\n\nvar PayPalButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PayPalButton, _Component);\n\n  function PayPalButton(props) {\n    var _this;\n\n    _classCallCheck(this, PayPalButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PayPalButton).call(this, props));\n    window.React = React;\n    window.ReactDOM = ReactDOM;\n    _this.state = {\n      showButton: false\n    };\n    return _this;\n  }\n\n  _createClass(PayPalButton, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var isScriptLoaded = _ref.isScriptLoaded,\n          isScriptLoadSucceed = _ref.isScriptLoadSucceed;\n\n      if (!this.state.show) {\n        if (isScriptLoaded && !this.props.isScriptLoaded) {\n          // load finished\n          if (isScriptLoadSucceed) {\n            this.setState({\n              showButton: true\n            });\n            console.log('alehop!!', window.paypal.Button.react);\n          } else this.props.onError();\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          isScriptLoaded = _this$props.isScriptLoaded,\n          isScriptLoadSucceed = _this$props.isScriptLoadSucceed;\n\n      if (isScriptLoaded && isScriptLoadSucceed) {\n        this.setState({\n          showButton: true\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      delete window.React;\n      delete window.ReactDOM;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var client = {\n        sandbox: 'xxxxxx',\n        production: 'xxxxxx'\n      };\n\n      var payment = function payment() {\n        return paypal.rest.payment.create('sandbox', client, {\n          transactions: [{\n            amount: {\n              total: '1.00',\n              currency: 'USD'\n            }\n          }]\n        });\n      };\n\n      var onAuthorize = function onAuthorize(data, actions) {\n        return actions.payment.execute().then(function () {\n          console.log('The payment was completed!', _this2);\n\n          _this2.setState({\n            showButton: false\n          });\n\n          var payment = Object.assign({}, _this2.props.payment);\n          payment.paid = true;\n          payment.cancelled = false;\n          payment.payerID = data.payerID;\n          payment.paymentID = data.paymentID;\n          payment.paymentToken = data.paymentToken;\n          payment.returnUrl = data.returnUrl;\n\n          _this2.props.dispatch(paymentAuthorized(payment));\n        });\n      };\n\n      var onCancel = function onCancel(data) {\n        console.log('The payment was cancelled!', data);\n\n        _this2.props.dispatch(paymentCancelled());\n      };\n\n      return React.createElement(If, {\n        condition: this.state.showButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(paypal.Button.react, {\n        env: 'sandbox',\n        client: client,\n        payment: payment,\n        commit: true,\n        onAuthorize: onAuthorize,\n        onCancel: onCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PayPalButton;\n}(Component);\n\nvar selector = function selector(appState) {\n  return {\n    payment: appState.payment\n  };\n};\n\nvar PayPalButtonRedux = connect(selector)(PayPalButton);\nexport default scriptLoader('https://www.paypalobjects.com/api/checkout.js')(PayPalButtonRedux); // import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n// import { userPayments } from '../../actions/authAction';  \n// import { withRouter } from 'react-router-dom';\n// import TextFieldGroup from '../common/TextFieldGroup';\n// import PayImage  from '../../assets/image/btn_buynowCC_LG.gif';\n// import {scriptLoader, paypal} from 'react-async-script-loader';\n// import ReactDOM from 'react-dom';\n// // import scriptLoader from 'react-async-script-loader';\n// // import PropTypes from 'prop-types';\n// class Payments extends Component {\n//   constructor(props) {\n//     super(props);\n//     window.React = React;\n//     window.ReactDOM = ReactDOM;\n//     this.state = {\n//       showButton: false,\n//       env: 'sandbox', // Or 'sandbox'\n//       client: {\n//          sandbox:    'vivekyadav264-facilitator@gmail.com', // sandbox client ID\n//          production: 'AQTxY9TnJ0Dc6kty0QYDBXlMn-k_Fxy9ppriWc-Ks1m3oLqGNgPN7KMwUW8bj2yahCol_embJa3jr87Q' // production client ID\n//         //'client_id': 'AfPa2JGqfMYIwoEvB2hFHqNCRiwT8-1SUbQGXT9PxH4Cf5gm4c6ms0GZnpBtckmv3dgsN_-OVPZt0U2i',\n//         //'client_secret': 'EA49HIg-l9pyL0n-GSNTnpmxTF94ynfqrt3-xROKJ5DaOdL880Vpoii8I4_EMHGF_JdBvQAWuxYnMTNk'\n//       },\n//       commit: true, // Show a 'Pay Now' button\n//     };\n//   }\n//   componentDidMount() {\n//     const { isScriptLoaded, isScriptLoadSucceed } = this.props;\n//     if (isScriptLoaded && isScriptLoadSucceed) {\n//       this.setState({ showButton: true });\n//     }\n//   }\n//   componentWillReceiveProps({ isScriptLoaded, isScriptLoadSucceed }) {\n//     if (!this.state.show) {\n//       if (isScriptLoaded && !this.props.isScriptLoaded) {\n//         if (isScriptLoadSucceed) {\n//           this.setState({ showButton: true });\n//         } else {\n//           console.log('Cannot load Paypal script!');\n//           this.props.onError();\n//         }\n//       }\n//     }\n//   }\n//   render() {\n//     const payment = () => paypal.rest.payment.create(this.props.env, this.props.client, {\n//       transactions: [\n//                     { amount: { total: this.props.total, currency: this.props.currency } },\n//       ],\n//     });\n//     const onAuthorize = (data, actions) => actions.payment.execute().then(() => {\n//       const payment = Object.assign({}, this.props.payment);\n//       payment.paid = true;\n//       payment.cancelled = false;\n//       payment.payerID = data.payerID;\n//       payment.paymentID = data.paymentID;\n//       payment.paymentToken = data.paymentToken;\n//       payment.returnUrl = data.returnUrl;\n//       this.props.onSuccess(payment);\n//     });\n//     let ppbtn = '';\n//     if (this.state.showButton) {\n//       ppbtn = (<paypal.Button.react\n//         env={this.state.env}\n//         client={this.state.client}\n//         payment={payment}\n//         commit\n//         onAuthorize={onAuthorize}\n//         onCancel={this.props.onCancel}\n//       />);\n//     }\n//     return <div>{ppbtn}</div>;\n//   }\n// }\n// Payments.propTypes = {\n//   currency: PropTypes.string.isRequired,\n//   total: PropTypes.number.isRequired,\n//   client: PropTypes.object.isRequired,\n// };\n// Payments.defaultProps = {\n//   env: 'sandbox',\n//   onSuccess: (payment) => {\n//     console.log('The payment was succeeded!', payment);\n//   },\n//   onCancel: (data) => {\n//     console.log('The payment was cancelled!', data);\n//   },\n//   onError: (err) => {\n//     console.log('Error loading Paypal script!', err);\n//   },\n// };\n//   constructor() {  \n//     super();\n//     this.state= {\n//       name: '',\n//     //   email: '',\n//     //   password: '',\n//     //   password2: '',  \n//     //   errors: {}\n//     };\n//     this.onChange = this.onChange.bind(this);\n//     this.onSubmit = this.onSubmit.bind(this);\n//   }\n//   componentWillReceiveProps(nextProps){\n//     if(nextProps.errors){\n//       this.setState({errors: nextProps.errors})\n//     }\n//   }\n//   onSubmit(e){\n//     e.preventDefault();\n//     const userPay = {\n//       name: this.state.name,      \n//     }; \n//     console.log(userPay); \n//     this.props.userPayments(userPay, this.props.history);\n//     }\n//   onChange(e){\n//     this.setState({ [e.target.name]: e.target.value});\n//   }\n//   render(){\n//     const { errors } = this.state;\n//     return (\n//       <div>\n//       <div className=\"container-fluid\">\n//           <div className=\"banner-section\">\n//               <div className=\"banner-title\">\n//                   <h1>Now, You can pay</h1>\n//               </div>\n//           </div>\n//       </div>\n//       <form>\n//       <TextFieldGroup\n//             placeholder=\"Name\"\n//             name=\"name\"\n//             type=\"name\"\n//             value={this.state.name}\n//             onChange={this.onChange}\n//             // error={errors.name}\n//             />\n//             <input type=\"submit\" className=\"btn btn-info\" />\n//       </form>\n//       </div>\n//     );\n//   }\n// } \n// Payments.propTypes = {\n//   userPayments: PropTypes.func.isRequired,\n//   auth: PropTypes.object.isRequired,\n//   errors: PropTypes.object.isRequired\n// };\n// const mapStateToProps = state => ({\n//   auth: state.auth,\n//   errors: state.errors\n// })\n//export default scriptLoader('https://www.paypalobjects.com/api/checkout.js')(Payments);\n// export default connect(mapStateToProps, {userPayments})(withRouter(Payments));\n// import React, { Component } from 'react';\n// import StripeCheckout from 'react-stripe-checkout';\n// import { userInfo } from 'os';\n// import { logoutUser } from '../../actions/authAction';\n// import { clearCurrentProfile } from '../../actions/profileActions';\n// import PayImage  from '../../assets/image/btn_buynowCC_LG.gif';\n// class Payments extends Component {\n//     render() {\n//         return(\n//             <div>\n//                 <form>\n//                     <div className=\"btn\"><img src={PayImage} alt=\"paypal payment method\" /></div>\n//                 </form>\n//             </div>\n//         //     <StripeCheckout\n//         //         name=\"Vivek\"\n//         //         description=\"You can pay now\"\n//         //         amount={500}\n//         //         token={token => console.log(token)}\n//         //         stripeKey={process.env.REACT_APP_STRIPE_KEY}\n//         //     >\n//         //    <a herf=\"/success\"> <div className=\"btn  btn-info mt-4\">Buy by Card</div> </a> \n//         //     </StripeCheckout>\n//         )\n//     }\n// }\n// export default Payments;","map":{"version":3,"sources":["/home/tech/Downloads/newCode/src/components/payments/Payments.js"],"names":["React","Component","PropTypes","ReactDOM","connect","scriptLoader","paypal","paymentAuthorized","paymentCancelled","PayPalButton","props","window","state","showButton","isScriptLoaded","isScriptLoadSucceed","show","setState","console","log","Button","react","onError","client","sandbox","production","payment","rest","create","transactions","amount","total","currency","onAuthorize","data","actions","execute","then","Object","assign","paid","cancelled","payerID","paymentID","paymentToken","returnUrl","dispatch","onCancel","selector","appState","PayPalButtonRedux"],"mappings":"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":["import React, { Component, PropTypes } from 'react'\nimport ReactDOM from 'react-dom'\nimport { connect } from 'react-redux'\nimport {scriptLoader, paypal} from 'react-async-script-loader'\n\nimport { paymentAuthorized, paymentCancelled } from '../../actions'\n\nclass PayPalButton extends Component {\n  constructor(props) {\n    super(props)\n    window.React = React\n    window.ReactDOM = ReactDOM\n    this.state = {\n      showButton: false,\n    }\n  }\n\n  componentWillReceiveProps ({ isScriptLoaded, isScriptLoadSucceed }) {\n    if (!this.state.show) {\n      if (isScriptLoaded && !this.props.isScriptLoaded) { // load finished\n        if (isScriptLoadSucceed) {\n          this.setState({ showButton: true })\n          console.log('alehop!!', window.paypal.Button.react)\n        }\n        else this.props.onError()\n      }\n    }\n  }\n\n  componentDidMount () {\n    const { isScriptLoaded, isScriptLoadSucceed } = this.props\n    if (isScriptLoaded && isScriptLoadSucceed) {\n      this.setState({ showButton: true })\n    }\n  }\n\n  componentWillUnmount() {\n    delete window.React\n    delete window.ReactDOM\n  }\n\n  render() {\n    const client = {\n      sandbox:    'xxxxxx',\n      production: 'xxxxxx',\n    }\n\n    const payment = () => {\n      return paypal.rest.payment.create('sandbox', client,\n        {\n          transactions: [\n            { amount: { total: '1.00', currency: 'USD' } },\n          ],\n        },\n      )\n    }\n\n    const onAuthorize = (data, actions) => {\n      return actions.payment.execute().then(() => {\n        console.log('The payment was completed!', this)\n        this.setState({ showButton: false })\n        const payment = Object.assign({}, this.props.payment)\n        payment.paid = true\n        payment.cancelled =  false\n        payment.payerID =  data.payerID\n        payment.paymentID =  data.paymentID\n        payment.paymentToken =  data.paymentToken\n        payment.returnUrl =  data.returnUrl\n        this.props.dispatch(paymentAuthorized(payment))\n      })\n    }\n\n    const onCancel = (data) => {\n      console.log('The payment was cancelled!', data)\n      this.props.dispatch(paymentCancelled())\n    }\n\n    return (\n      <If condition={this.state.showButton}>\n        <paypal.Button.react\n          env={'sandbox'}\n          client={client}\n          payment={payment}\n          commit={true}\n          onAuthorize={onAuthorize}\n          onCancel={onCancel}\n        />\n      </If>\n    )\n  }\n}\n\nconst selector = (appState) => ({\n  payment: appState.payment,\n})\n\nconst PayPalButtonRedux = connect(selector)(PayPalButton)\n\nexport default scriptLoader('https://www.paypalobjects.com/api/checkout.js')(PayPalButtonRedux)\n// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n// import { userPayments } from '../../actions/authAction';  \n// import { withRouter } from 'react-router-dom';\n// import TextFieldGroup from '../common/TextFieldGroup';\n// import PayImage  from '../../assets/image/btn_buynowCC_LG.gif';\n// import {scriptLoader, paypal} from 'react-async-script-loader';\n\n// import ReactDOM from 'react-dom';\n// // import scriptLoader from 'react-async-script-loader';\n// // import PropTypes from 'prop-types';\n\n// class Payments extends Component {\n//   constructor(props) {\n//     super(props);\n//     window.React = React;\n//     window.ReactDOM = ReactDOM;\n//     this.state = {\n//       showButton: false,\n//       env: 'sandbox', // Or 'sandbox'\n//       client: {\n//          sandbox:    'vivekyadav264-facilitator@gmail.com', // sandbox client ID\n//          production: 'AQTxY9TnJ0Dc6kty0QYDBXlMn-k_Fxy9ppriWc-Ks1m3oLqGNgPN7KMwUW8bj2yahCol_embJa3jr87Q' // production client ID\n//         //'client_id': 'AfPa2JGqfMYIwoEvB2hFHqNCRiwT8-1SUbQGXT9PxH4Cf5gm4c6ms0GZnpBtckmv3dgsN_-OVPZt0U2i',\n//         //'client_secret': 'EA49HIg-l9pyL0n-GSNTnpmxTF94ynfqrt3-xROKJ5DaOdL880Vpoii8I4_EMHGF_JdBvQAWuxYnMTNk'\n//       },\n//       commit: true, // Show a 'Pay Now' button\n//     };\n//   }\n//   componentDidMount() {\n//     const { isScriptLoaded, isScriptLoadSucceed } = this.props;\n//     if (isScriptLoaded && isScriptLoadSucceed) {\n//       this.setState({ showButton: true });\n//     }\n//   }\n//   componentWillReceiveProps({ isScriptLoaded, isScriptLoadSucceed }) {\n//     if (!this.state.show) {\n//       if (isScriptLoaded && !this.props.isScriptLoaded) {\n//         if (isScriptLoadSucceed) {\n//           this.setState({ showButton: true });\n//         } else {\n//           console.log('Cannot load Paypal script!');\n//           this.props.onError();\n//         }\n//       }\n//     }\n//   }\n \n//   render() {\n//     const payment = () => paypal.rest.payment.create(this.props.env, this.props.client, {\n//       transactions: [\n//                     { amount: { total: this.props.total, currency: this.props.currency } },\n//       ],\n//     });\n \n//     const onAuthorize = (data, actions) => actions.payment.execute().then(() => {\n//       const payment = Object.assign({}, this.props.payment);\n//       payment.paid = true;\n//       payment.cancelled = false;\n//       payment.payerID = data.payerID;\n//       payment.paymentID = data.paymentID;\n//       payment.paymentToken = data.paymentToken;\n//       payment.returnUrl = data.returnUrl;\n//       this.props.onSuccess(payment);\n//     });\n \n//     let ppbtn = '';\n//     if (this.state.showButton) {\n//       ppbtn = (<paypal.Button.react\n//         env={this.state.env}\n//         client={this.state.client}\n//         payment={payment}\n//         commit\n//         onAuthorize={onAuthorize}\n//         onCancel={this.props.onCancel}\n//       />);\n//     }\n//     return <div>{ppbtn}</div>;\n//   }\n// }\n \n// Payments.propTypes = {\n//   currency: PropTypes.string.isRequired,\n//   total: PropTypes.number.isRequired,\n//   client: PropTypes.object.isRequired,\n// };\n \n// Payments.defaultProps = {\n//   env: 'sandbox',\n//   onSuccess: (payment) => {\n//     console.log('The payment was succeeded!', payment);\n//   },\n//   onCancel: (data) => {\n//     console.log('The payment was cancelled!', data);\n//   },\n//   onError: (err) => {\n//     console.log('Error loading Paypal script!', err);\n//   },\n// };\n//   constructor() {  \n//     super();\n//     this.state= {\n//       name: '',\n//     //   email: '',\n//     //   password: '',\n//     //   password2: '',  \n//     //   errors: {}\n//     };\n//     this.onChange = this.onChange.bind(this);\n//     this.onSubmit = this.onSubmit.bind(this);\n//   }\n//   componentWillReceiveProps(nextProps){\n//     if(nextProps.errors){\n//       this.setState({errors: nextProps.errors})\n//     }\n//   }\n//   onSubmit(e){\n//     e.preventDefault();\n//     const userPay = {\n//       name: this.state.name,      \n//     }; \n//     console.log(userPay); \n//     this.props.userPayments(userPay, this.props.history);\n   \n//     }\n//   onChange(e){\n//     this.setState({ [e.target.name]: e.target.value});\n//   }\n//   render(){\n//     const { errors } = this.state;\n\n//     return (\n//       <div>\n//       <div className=\"container-fluid\">\n//           <div className=\"banner-section\">\n//               <div className=\"banner-title\">\n//                   <h1>Now, You can pay</h1>\n//               </div>\n//           </div>\n\n//       </div>\n//       <form>\n//       <TextFieldGroup\n//             placeholder=\"Name\"\n//             name=\"name\"\n//             type=\"name\"\n//             value={this.state.name}\n//             onChange={this.onChange}\n//             // error={errors.name}\n//             />\n//             <input type=\"submit\" className=\"btn btn-info\" />\n//       </form>\n      \n//       </div>\n//     );\n//   }\n// } \n// Payments.propTypes = {\n//   userPayments: PropTypes.func.isRequired,\n//   auth: PropTypes.object.isRequired,\n//   errors: PropTypes.object.isRequired\n// };\n\n// const mapStateToProps = state => ({\n//   auth: state.auth,\n//   errors: state.errors\n// })\n\n//export default scriptLoader('https://www.paypalobjects.com/api/checkout.js')(Payments);\n// export default connect(mapStateToProps, {userPayments})(withRouter(Payments));\n\n// import React, { Component } from 'react';\n\n// import StripeCheckout from 'react-stripe-checkout';\n// import { userInfo } from 'os';\n// import { logoutUser } from '../../actions/authAction';\n// import { clearCurrentProfile } from '../../actions/profileActions';\n// import PayImage  from '../../assets/image/btn_buynowCC_LG.gif';\n\n// class Payments extends Component {\n//     render() {\n       \n//         return(\n//             <div>\n            \n//                 <form>\n                    \n//                     <div className=\"btn\"><img src={PayImage} alt=\"paypal payment method\" /></div>\n//                 </form>\n//             </div>\n//         //     <StripeCheckout\n//         //         name=\"Vivek\"\n//         //         description=\"You can pay now\"\n//         //         amount={500}\n//         //         token={token => console.log(token)}\n//         //         stripeKey={process.env.REACT_APP_STRIPE_KEY}\n//         //     >\n//         //    <a herf=\"/success\"> <div className=\"btn  btn-info mt-4\">Buy by Card</div> </a> \n//         //     </StripeCheckout>\n//         )\n//     }\n// }\n// export default Payments;"]},"metadata":{},"sourceType":"module"}